// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cmd

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComCjp2600GolCmd(in *jlexer.Lexer, out *Var) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "jPath":
			out.JPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComCjp2600GolCmd(out *jwriter.Writer, in Var) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"jPath\":"
		out.RawString(prefix)
		out.String(string(in.JPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Var) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComCjp2600GolCmd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Var) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComCjp2600GolCmd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Var) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComCjp2600GolCmd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Var) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComCjp2600GolCmd(l, v)
}
func easyjson56de76c1DecodeGithubComCjp2600GolCmd1(in *jlexer.Lexer, out *Sequence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = SequenceType(in.Int())
		case "jobs":
			if in.IsNull() {
				in.Skip()
				out.Jobs = nil
			} else {
				in.Delim('[')
				if out.Jobs == nil {
					if !in.IsDelim(']') {
						out.Jobs = make([]Job, 0, 1)
					} else {
						out.Jobs = []Job{}
					}
				} else {
					out.Jobs = (out.Jobs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Job
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Jobs = append(out.Jobs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComCjp2600GolCmd1(out *jwriter.Writer, in Sequence) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"jobs\":"
		out.RawString(prefix)
		if in.Jobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Jobs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sequence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComCjp2600GolCmd1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sequence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComCjp2600GolCmd1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sequence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComCjp2600GolCmd1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sequence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComCjp2600GolCmd1(l, v)
}
func easyjson56de76c1DecodeGithubComCjp2600GolCmd2(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence":
			if in.IsNull() {
				in.Skip()
				out.Sequence = nil
			} else {
				in.Delim('[')
				if out.Sequence == nil {
					if !in.IsDelim(']') {
						out.Sequence = make([]Sequence, 0, 2)
					} else {
						out.Sequence = []Sequence{}
					}
				} else {
					out.Sequence = (out.Sequence)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Sequence
					if data := in.Raw(); in.Ok() {
						in.AddError((v4).UnmarshalJSON(data))
					}
					out.Sequence = append(out.Sequence, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComCjp2600GolCmd2(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix[1:])
		if in.Sequence == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Sequence {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Raw((v6).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComCjp2600GolCmd2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComCjp2600GolCmd2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComCjp2600GolCmd2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComCjp2600GolCmd2(l, v)
}
func easyjson56de76c1DecodeGithubComCjp2600GolCmd3(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "body":
			if m, ok := out.Body.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Body.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Body = in.Interface()
			}
		case "header":
			if m, ok := out.Header.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Header.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Header = in.Interface()
			}
		case "var":
			if in.IsNull() {
				in.Skip()
				out.Var = nil
			} else {
				in.Delim('[')
				if out.Var == nil {
					if !in.IsDelim(']') {
						out.Var = make([]Var, 0, 1)
					} else {
						out.Var = []Var{}
					}
				} else {
					out.Var = (out.Var)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Var
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Var = append(out.Var, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComCjp2600GolCmd3(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if m, ok := in.Body.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Body.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Body))
		}
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		if m, ok := in.Header.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Header.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Header))
		}
	}
	{
		const prefix string = ",\"var\":"
		out.RawString(prefix)
		if in.Var == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Var {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Raw((v9).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Job) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComCjp2600GolCmd3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Job) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComCjp2600GolCmd3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Job) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComCjp2600GolCmd3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Job) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComCjp2600GolCmd3(l, v)
}
